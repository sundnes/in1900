TITLE: Ch.1: Computing with formulas
AUTHOR: Joakim Sundnes at Simula Research Laboratory & University of Oslo, Dept. of Informatics
AUTHOR: Hans Petter Langtangen at Simula Research Laboratory & University of Oslo, Dept. of Informatics
DATE: today


!split
===== Why program? =====

!bquote
*Everybody in this country should learn how to program a computer... because it teaches you how to think*. Steve Jobs, 1955-2011.
!equote

!split
===== The teaching strategy is example-based =====

!bblock
  * Present a case (example)
  * Present the complete program
  * Dissect and discuss every line
  * Simulate programs by hand (be the computer!)
!eblock

!split
===== Python versions 2 and 3 =====

!bblock
  * This course teaches the Python programming language
  * Two active versions; Python 2 (2.7) and Python 3 (3.6)
  * In IN1900 we teach Python 3, but the book is Python 2!
  * You can use the version you want
  * Very few important differences;
    * print(...) vs print ...
    * Integer division
  * More on this later
!eblock

!split
===== The learning strategy is about doing exercises =====

!bblock
  * Study and try to understand examples
  * Program a lot!
  * This course has many compulsory exercises
  * The course curriculum is defined through exercises
!eblock

!split
===== Chapter 1 is about evaluating formulas =====

!bblock Why?
  * Everybody understands the problem
  * Many fundamental concepts are introduced
   * variables
   * arithmetic expressions
   * objects
   * printing text and numbers
!eblock

!split
===== Evaluating a mathematical formula =====

!bblock Height of a ball in vertical motion

!bt
\[ y(t) = v_0t- \frac{1}{2}gt^2 \]
!et
where

  * $y$ is the height (position) as function of time $t$
  * $v_0$ is the initial velocity at $t=0$
  * $g$ is the acceleration of gravity

Task: given $v_0$, $g$ and $t$, compute $y$.
!eblock

!split
===== Use a calculator? A program is much more powerful! =====

!bblock What is a program?
A sequence of instructions to the computer, written in a programming language, somewhat like English, but very much simpler - and very much stricter.
!eblock

!bblock
This course teaches the Python language.
!eblock

!bblock Our first example program:
Evaluate $y(t) = v_0t- \frac{1}{2}gt^2$ for $v_0=5$, $g=9.81$ and $t=0.6$:

!bt
\[ y = 5\cdot 0.6 - \frac{1}{2}\cdot 9.81 \cdot 0.6^2\]
!et

The complete Python program:

!bc pypro
print(5*0.6 - 0.5*9.81*0.6**2)
!ec
!eblock

!split
===== How to write and run the program =====

!bblock
  * A program is plain text, written in a *plain text editor*
  * Use Atom, Gedit, Emacs, Vim or Spyder (*not* MS Word!)

__Step 1.__ Write the program in a text editor, here the line

!bc pypro
print(5*0.6 - 0.5*9.81*0.6**2)
!ec

__Step 2.__
Save the program to a file (say) `ball.py`.
(`.py` denotes Python.)

__Step 3.__
Move to a *terminal window* and go to the folder containing the program file.

__Step 4.__ Run the program:

!bc sys
Terminal> python ball.py
!ec
The program prints out `1.2342` in the terminal window.
!eblock

!split
!split
===== Python can be used interactively as a calculator and to test statements =====

!bblock
  * So far we have performed calculations in Python *programs*
  * Python can also be used interactively in what is known as a *shell*
  * Type `python` (or `ipython`) in the terminal window
  * A Python shell is entered where you can write statements after `>>>`
    (IPython has a different prompt)
!bc sys
Terminal> python
Python 3.6.1 |Anaconda 4.4.0 (x86_64)| (default, May 11 2017, 13:04:09)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 5*0.6-0.5*9.81*0.6**2
1.2342
>>> print(5*0.6-0.5*9.81*0.6**2)
1.2342
!ec
!eblock


!split
===== In this course we probably use computers differently from what you are used to =====

!bblock
  * When you use a computer, you always run some programs
  * The computer cannot do anything without being precisely told what to do, and humans write and use programs to tell the computer what to do
  * Most people are used to double-click on a symbol to run a program - in this course we give commands in a terminal window because that is more efficient if you work intensively with programming
  * Hard math problems suddenly become straightforward by writing programs
!eblock

!split
===== Some frequently used computer science terms =====

!bpop
!bblock
  * Program or code or application
  * Source code (program text)
  * Code/program snippet
  * Execute or run a program
  * Algorithm (recipe for a program)
  * Implementation (writing the program)
  * Verification (does the program work correctly?)
  * Bugs (errors) and debugging
!eblock
!epop

!bpop
!bblock
Computer science meaning of terms is often different from the human language meaning
!eblock
!epop



!split
===== A short program can calculate any integral =====

You cannot calculate this integral by hand:

!bt
\[ \int_{-\infty}^1 e^{-x^2}dx .\]
!et

A little program can compute this and ``all'' other integrals:

!bc pypro
from numpy import *

def integrate(f, a, b, n=100):
    """
    Integrate f from a to b,
    using the Trapezoidal rule with n intervals.
    """
    x = linspace(a, b, n+1)    # Coordinates of the intervals
    h = x[1] - x[0]            # Interval spacing
    I = h*(sum(f(x)) - 0.5*(f(a) + f(b)))
    return I

# Define my special integrand
def my_function(x):
    return exp(-x**2)

minus_infinity = -20  # Approximation of minus infinity
I = integrate(my_function, minus_infinity, 1, n=1000)
print('Value of integral:', I)
!ec

_The program computes an approximation with error $10^{-12}$ within 0.1 s_ ($n=10^6$)!

!split
===== Computers are very picky about grammar rules and typos =====

!bpop
!bblock
Look at the two lines

!bc
print(5*0.6 - 0.5*9.81*0.6**2)
write(5*0,6 - 0,5*9,81*0,6^2)
!ec
Would you consider these two lines to be equal?

  * Humans may say *yes*, computers always *no*
  * The second line has no meaning as a Python program
  * `write` is not a legal Python word in this context, comma has another
    meaning than in math, and the hat is not exponentiation
  * We have to be extremely accurate with how we write computer programs!
  * It takes time and experience to learn this
!eblock
!epop

!split
===== Store numbers in variables to make a program more readable =====

!bblock
From mathematics you are used to variables, e.g.,

!bt
\[ v_0=5,\quad g=9.81,\quad t=0.6,\quad y = v_0t -\frac{1}{2}gt^2\]
!et

We can use variables in a program too, and this makes the last program
easier to read and understand:

!bc pycod
v0 = 5
g = 9.81
t = 0.6
y = v0*t - 0.5*g*t**2
print(y)
!ec

This program spans several lines of text and use variables, otherwise the program performs the same calculations and gives the same output as the previous program
!eblock

!split
===== There is great flexibility in choosing variable names =====

!bblock
  * In mathematics we usually use one letter for a variable
  * The name of a variable in a program can contain the letters a-z, A-Z, underscore `_` and the digits 0-9, but cannot start with a digit
  * Variable names are case-sensitive (e.g., `a` is different from `A`)

!bc pypro
initial_velocity = 5
accel_of_gravity = 9.81
TIME = 0.6
VerticalPositionOfBall = initial_velocity*TIME - \
                         0.5*accel_of_gravity*TIME**2
print(VerticalPositionOfBall)
!ec
(Note: the backslash allows an instruction to be continued on the next line)
!eblock

!bblock
Good variable names make a program easier to understand!
!eblock

!split
===== Some words are reserved in Python =====

!bblock
Certain words have a special meaning in Python and cannot be used as variable names. These are: `and`,
`as`,
`assert`,
`break`,
`class`,
`continue`,
`def`,
`del`,
`elif`,
`else`,
`except`,
`exec`,
`finally`,
`for`,
`from`,
`global`,
`if`,
`import`,
`in`,
`is`,
`lambda`,
`not`,
`or`,
`pass`,
`print`,
`raise`,
`return`,
`try`,
`with`,
`while`, and
`yield`.
!eblock

!split
===== Comments are useful to explain how you think in programs =====

!bblock Program with comments:
!bc pycod
# program for computing the height of a ball
# in vertical motion
v0 = 5    # initial velocity
g = 9.81  # acceleration of gravity
t = 0.6   # time
y = v0*t - 0.5*g*t**2  # vertical position
print(y)
!ec
!eblock

!bblock Note:
  * Everything after `#` on a line is a comment and ignored by Python
  * Comments are used to explain what the computer instructions mean, what variables mean, how the programmer reasoned when she wrote the program, etc.
  * Bad comments say no more than the code: `a = 5  # set a to 5`
!eblock



!split
===== A program consists of statements =====

!bblock
!bc pypro
a = 1      # 1st statement (assignment statement)
b = 2      # 2nd statement (assignment statement)
c = a + b  # 3rd statement (assignment statement)
print(c)    # 4th statement (print statement)
!ec

Normal rule: one statement per line, but
multiple statements per line is possible with a semicolon
in between the statements:

!bc pycod
a = 1;  b = 2;  c = a + b;  print(c)
!ec
!eblock

!split
===== Assignment statements evaluate right-hand side and assign the result to the variable on the left-hand side =====

!bblock
!bc pypro
myvar = 10
myvar = 3*myvar   # = 30
# #if FORMAT == 'ipynb'
myvar
# #endif
!ec
!eblock

!split
===== Syntax is the exact specification of instructions to the computer =====

!bblock
Programs must have correct syntax, i.e., correct use of the computer language grammar rules, and no misprints!
!eblock

!bblock This is a program with two syntax errors:
!bc pypro
myvar = 5.2
prinnt(Myvar)
!ec

# #if FORMAT != 'ipynb'
!bc
prinnt(Myvar)

NameError: name 'prinnt' is not defined
!ec
# #endif
Only the first encountered error is reported and the program is stopped (correct the error and continue with next error)
!eblock

!bpop
!bquote
*Programming demands significantly higher standard of accuracy. Things don't simply have to make sense to another human being, they must make sense to a computer.* Donald Knuth, computer scientist, 1938-
!equote
!epop

!split
===== Blanks (whitespace) can be used to nicely format the program text =====

!bblock
Blanks may or may not be important in Python programs.
These statements are equivalent (blanks do not matter):

!bc pycod
v0=3
v0  =  3
v0=   3
v0 = 3
!ec

Here blanks do matter:

!bc pycod
counter = 1
while counter <= 4:
    counter = counter + 1   # correct (4 leading blanks)

while counter <= 4:
counter = counter + 1       # invalid syntax
!ec
(more about this in Ch. 2)
!eblock

!split
===== A program takes some known *input* data and computes some *output* data =====

!bblock
!bc pypro
v0 = 3;  g = 9.81;  t = 0.6
position = v0*t - 0.5*g*t*t
velocity = v0 - g*t
print('position:', position, 'velocity:', velocity)
!ec
# #if FORMAT == 'ipynb'
Here:
# #endif

  * Input: `v0`, `g`, and `t`
  * Output: `position` and `velocity`
!eblock

!split
===== Evaluating a formula for temperature conversion =====

!bblock
Given $C$ as a temperature in Celsius degrees,
compute the corresponding Fahrenheit degrees $F$:

!bt
\[ F = \frac{9}{5}C + 32 \]
!et

Program:

!bc pypro
C = 21
F = (9/5)*C + 32
print(F)
!ec

# #if FORMAT != 'ipynb'
Execution:

!bc sys
Terminal> python c2f_v1.py
69.80000000000001
!ec
# #endif
!eblock

!split
===== WARNING: Python 2 gives a different answer! =====
!bc sys
Terminal> python2 c2f_v1.py
53
!ec

Many programming languages give the same error; Java, C, C++, ...

!split
===== The error is caused by (unintended) integer division =====

!bblock
  * 9/5 is not 1.8 but 1 in most computer languages (!)
  * If $a$ and $b$ are integers, $a/b$ implies integer division: the largest integer $c$ such that $cb\leq a$
  * Examples: $1/5=0$, $2/5=0$, $7/5=1$, $12/5=2$
  * In mathematics, 9/5 is a real number (1.8) - this is called float division in Python and is the division we want
  * One of the operands ($a$ or $b$) in $a/b$ must be a real number ("float") to get float division
  * A float in Python has a dot (or decimals): `9.0` or `9.` is float
  * No dot implies integer: `9` is an integer
  * `9.0/5` yields `1.8`, `9/5.` yields `1.8`, `9/5` yields `1`

Corrected version (works in Python 2 and 3):

!bc pypro
C = 21
F = (9.0/5)*C + 32
!ec
!eblock

!split
===== Variables refer to objects. Objects have types. =====

!bblock
Variables refer to objects:

!bc pycod
a = 5       # a refers to an integer (int) object
b = 9       # b refers to an integer (int) object
c = 9.0     # c refers to a real number (float) object
d = b/a     # d refers to an int/int => int object
e = c/a     # e refers to float/int => float object
# #if FORMAT == 'ipynb'
print(d, e)
# #endif
!ec

We can convert between object types:

!bc pycod
a = 3              # a is int
b = float(a)       # b is float 3.0
c = 3.9            # c is float
d = int(c)         # d is int 3
d = round(c)       # d is float 4.0
d = int(round(c))  # d is int 4
d = str(c)         # d is str '3.9'
e = '-4.2'         # e is str
f = float(e)       # f is float -4.2
!ec
!eblock

!split
===== Arithmetic expressions are evaluated as you have learned in mathematics =====

!bblock
  * Example: $\frac{5}{9} + 2a^4/2$, in Python written as `5/9 + 2*a**4/2`
  * Same rules as in mathematics: proceed term by term (additions/subtractions) from the left, compute powers first, then multiplication and division, in each term
  * `r1 = 5/9` (=0)
  * `r2 = a**4`
  * `r3 = 2*r2`
  * `r4 = r3/2`
  * `r5 = r1 + r4`
  * Use parenthesis to override these default rules - or use parenthesis to explicitly tell how the rules work: <linebreak>
    `(5/9) + (2*(a**4))/2`
!eblock

!split
===== Standard mathematical functions are found in the `math` module =====

!bblock
  * What if we need to compute $\sin x$, $\cos x$, $\ln x$, etc. in a program?
  * Such functions are available in Python's `math` module
  * In general: lots of useful functionality in Python is available in modules - but modules must be *imported* in our programs

Compute $\sqrt{2}$ using the `sqrt` function in the `math` module:

!bc pycod
import math
r = math.sqrt(2)
# or
from math import sqrt
r = sqrt(2)
# or
from math import *   # import everything in math
r = sqrt(2)
!ec
!eblock

!split
===== Another example on computing with functions from `math` =====

!bblock
Evaluate

!bt
\[ Q = \sin x\cos x + 4\ln x \]
!et
for $x=1.2$.

!bc pypro
from math import sin, cos, log
x = 1.2
Q = sin(x)*cos(x) + 4*log(x)   # log is ln (base e)
print(Q)
!ec
!eblock


!split
===== The printf syntax gives great flexibility in formatting text with numbers =====

!bblock
Output from calculations often contain text and numbers, e.g.,

!bc
At t=0.6 s, y is 1.23 m.
!ec

We want to control the formatting of numbers: no of decimals, style: `0.6` vs `6E-01` or `6.0e-01`. So-called *printf formatting* is useful for this purpose:

!bc pycod
t = 0.6;  y = 1.2342
print('At t=%g s, y is %.2f m.' % (t, y))
!ec

The printf format has ``slots'' where the variables listed at the end are put: `%g` $\leftarrow$ `t`, `%.2f` $\leftarrow$ `y`
!eblock

!split
===== Examples on different printf formats =====

!bblock
!bc
%g         most compact formatting of a real number
%f         decimal notation (-34.674)
%10.3f     decimal notation, 3 decimals, field width 10
%.3f       decimal notation, 3 decimals, minimum width
%e or %E   scientific notation (1.42e-02 or 1.42E-02)
%9.2e      scientific notation, 2 decimals, field width 9
%d         integer
%5d        integer in a field of width 5 characters
%s         string (text)
%-20s      string, field width 20, left-adjusted
!ec

(See the the book for more explanation and overview)
!eblock

!split
===== Using printf formatting in our program =====

!bblock
Triple-quoted strings (`"""`) can be used for multi-line output, and here we combine such a string with printf formatting:

!bc pypro
v0 = 5
g = 9.81
t = 0.6
y = v0*t - 0.5*g*t**2

print("""
At t=%f s, a ball with
initial velocity v0=%.3E m/s
is located at the height %.2f m.
""" % (t, v0, y) )
!ec

# #if FORMAT != 'ipynb'
Running the program:

!bc sys
Terminal> python ball_print2.py

At t=0.600000 s, a ball with
initial velocity v0=5.000E+00 m/s
is located at the height 1.23 m.
!ec
# #endif
!eblock



!split
===== Summary of Chapter 1 (part 1) =====

!bblock
  * Programs must be accurate!
  * Variables are names for objects
  * We have met different object types: `int`, `float`, `str`
  * Choose variable names close to the mathematical symbols in
    the problem being solved
  * Arithmetic operations in Python: term by term (+/-) from left to right, power before * and / - as in mathematics; use parenthesis when there is any doubt
  * (If you use Python 2: Watch out for unintended integer division!)
!eblock

!split
===== Summary of Chapter 1 (part 2) =====

!bblock
Mathematical functions like $\sin x$ and $\ln x$ must be imported from the `math` module:

!bc pycod
from math import sin, log
x = 5
r = sin(3*log(10*x))
!ec

Use printf syntax for full control of output of text and numbers!

Important terms: object, variable, algorithm, statement, assignment, implementation, verification, debugging
!eblock


!split
===== Summarizing example: throwing a ball (problem) =====

!bblock
We throw a ball with velocity $v_0$, at an angle $\theta$ with the horizontal, from the point $(x=0,y=y_0)$. The trajectory of the ball is a parabola (we neglect air resistance):

!bt
\[ y = x\tan\theta - \frac{1}{2v_0}\frac{gx^2}{\cos^2\theta} + y_0 \]
!et

  * Program tasks:
   * initialize input data ($v_0$, $g$, $\theta$, $y_0$)
   * import from `math`
   * compute $y$
  * We give $x$, $y$ and $y_0$ in m, $g = 9.81\hbox {m/s}^2$, $v_0$ in km/h and $\theta$ in degrees - this requires conversion of $v_0$ to m/s and $\theta$ to radians
!eblock

!split
===== Summarizing example: throwing a ball (solution) =====

!bblock
Program:

!bc pypro
g = 9.81    # m/s**2
v0 = 15     # km/h
theta = 60  # degrees
x = 0.5     # m
y0 = 1      # m

print """v0    = %.1f km/h
theta = %d degrees
y0    = %.1f m
x     = %.1f m""" % (v0, theta, y0, x)

# convert v0 to m/s and theta to radians:
v0 = v0/3.6
from math import pi, tan, cos
theta = theta*pi/180

y = x*tan(theta) - 1/(2*v0)*g*x**2/((cos(theta))**2) + y0

print('y = %.1f m' % y)
!ec
!eblock
